package pet.store.utils;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static pet.store.utils.FileAndPath.getFileReader;
import static pet.store.utils.ResourcesConnections.temp;

public class JsonProcessor {
    public static String getRequestParam(String fileName, Map<String, String> jsonVariables) {
        JSONObject jsonObject = null;
        jsonObject = getJSONObject(fileName);
        for (Map.Entry<String, String> entry: jsonVariables.entrySet()) {
            String value = entry.getValue();
            String key = entry.getKey();
            if ("AUTO".equalsIgnoreCase(value)) {
                long timestamp = System.currentTimeMillis();
                if (jsonObject.get(key) instanceof Number) {
                    jsonObject.put(key, timestamp);
                } else {
                    jsonObject.put(key, "AUTO" + timestamp);
                }
            } else {
                if (jsonObject.get(key) instanceof Number) {
                    if (value.contains(".")) {
                        jsonObject.put(key, Double.valueOf(value));
                    } else {
                        jsonObject.put(key, Integer.valueOf(value));
                    }
                } else {
                    jsonObject.put(key, value);
                }
            }
        }
//            jsonObject.put("petId", 1); System.out.println(jsonObject.get("id"));
        return jsonObject.toString();
    }

    public static JSONObject getRequestBodyWithAutoGeneratedData(JSONObject jsonObject, String fieldsToAutoGenerate) {
        if (!"none".equalsIgnoreCase(fieldsToAutoGenerate)) {
            String[] fields = fieldsToAutoGenerate.split(",");
            for (int i = 0; i < fields.length; i++) {
                long timestamp = System.currentTimeMillis();
                if (jsonObject.get(fields[i]) instanceof Number) {
                    jsonObject.put(fields[i], timestamp);
                } else {
                    jsonObject.put(fields[i], "AUTO" + timestamp);
                }
            }
        }
            return jsonObject;
    }

    public static JSONObject getRequestBodyWithDataFromResponse(JSONObject jsonObject, String fieldsGetFromResponse) {
        if (!"none".equalsIgnoreCase(fieldsGetFromResponse)) {
            boolean needToChangeKeyName = fieldsGetFromResponse.contains("->");
            String[] fieldNames = fieldsGetFromResponse.split(",");
            for (String fieldName: fieldNames) {
                if (needToChangeKeyName) {
                    // fieldName = "id->petId"
                    String[] keyValues = fieldName.split("->");
                    // set petId = temp.get(id)
                    jsonObject.put(keyValues[1], temp.get(keyValues[0]));
                } else {
                    // fieldName = "id"
                    // set id = temp.get(id)
                    jsonObject.put(fieldName, temp.get(fieldName));
                }
            }
        }
        return jsonObject;
    }

    public static JSONObject getJSONObject(String fileName) {
        JSONParser parser = new JSONParser();
        FileReader fr = null;
        try {
            fr = getFileReader(fileName);
            return (JSONObject) parser.parse(fr);
        } catch (IOException | ParseException e) {
            throw new RuntimeException(e);
        } finally {
            if (fr != null) {
                try {
                    fr.close();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }
    }

    public static void main(String[] args) {
        Map<String, String> map = new HashMap<>();
        map.put("id", "2.1");
        System.out.println(getRequestParam("add_a_pet.json", map));
    }
}
